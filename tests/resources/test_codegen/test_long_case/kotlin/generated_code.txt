import java.io.BufferedInputStream
import java.io.InputStream
import java.util.StringTokenizer


fun solve(H: Long, W: Long, K: Long, sr: Long, sc: Long, s: Array<String>, N: Long, fr: LongArray, fc: LongArray, F: LongArray, D: LongArray){
    return
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    class Scanner(stream: InputStream) {
        private val reader = BufferedInputStream(stream).bufferedReader()
        private var st: StringTokenizer? = null
        fun next(): String {
            while (!(st?.hasMoreTokens() ?: false)) st = StringTokenizer(reader.readLine())
            return st!!.nextToken()
        }
    }
    val sc = Scanner(System.`in`)
    val H = sc.next().toLong()
    val W = sc.next().toLong()
    val K = sc.next().toLong()
    val sr = sc.next().toLong()
    val sc = sc.next().toLong()
    val s = StringArray(H.toInt())
    for (i in 0 until H.toInt()) {
        s[i] = sc.next()
    }
    val N = sc.next().toLong()
    val fr = LongArray(N.toInt())
    val fc = LongArray(N.toInt())
    val F = LongArray(N.toInt())
    val D = LongArray(N.toInt())
    for (i in 0 until N.toInt()) {
        fr[i] = sc.next().toLong()
        fc[i] = sc.next().toLong()
        F[i] = sc.next().toLong()
        D[i] = sc.next().toLong()
    }
    solve(H, W, K, sr, sc, s, N, fr, fc, F, D)
}
