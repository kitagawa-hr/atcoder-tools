import java.io.BufferedInputStream
import java.io.InputStream
import java.util.StringTokenizer


fun solve(H: Long, W: Long, c: Array<LongArray>, A: Array<LongArray>){
    return
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    class Scanner(stream: InputStream) {
        private val reader = BufferedInputStream(stream).bufferedReader()
        private var st: StringTokenizer? = null
        fun next(): String {
            while (!(st?.hasMoreTokens() ?: false)) st = StringTokenizer(reader.readLine())
            return st!!.nextToken()
        }
    }
    val sc = Scanner(System.`in`)
    val H = sc.next().toLong()
    val W = sc.next().toLong()
    val c = Array<LongArray>((9-0+1).toInt()){ LongArray((9-0+1).toInt()) }
    for (i in 0 until (9-0+1).toInt()) {
        for (j in 0 until (9-0+1).toInt()) {
            c[i][j] = sc.next().toLong()
        }
    }
    val A = Array<LongArray>(H.toInt()){ LongArray(W.toInt()) }
    for (i in 0 until H.toInt()) {
        for (j in 0 until W.toInt()) {
            A[i][j] = sc.next().toLong()
        }
    }
    solve(H, W, c, A)
}
