import java.io.BufferedInputStream
import java.io.InputStream
import java.util.StringTokenizer


{% if mod %}
const val MOD = {{ mod }}
{% endif %}
{% if yes_str %}
const val YES = "{{ yes_str }}"
{% endif %}
{% if no_str %}
const val NO = "{{ no_str }}"
{% endif %}
{% if prediction_success %}
fun solve({{ formal_arguments }}){
    println("$N $M")
    assert (H.size == (N - 1).toInt())
    for (i in 0 until (N - 1).toInt()) {
        assert(H[i].size == (M - 2).toInt())
        for (j in 0 until (M - 2).toInt()) {
            if (j >0){ print(" ") }
            print(H[i][j])
        }
        println()
    }
    assert (A.size == (N - 1).toInt())
    assert (B.size == (N - 1).toInt())
    for (i in 0 until (N - 1).toInt()) {
        println("" + A[i] + " " + B[i]);
    }
    println(Q)
    assert (X.size == (M + Q).toInt())
    for (i in 0 until (M + Q).toInt()) {
        println(X[i])
    }
    println(YES)
    println(NO)
    println(MOD)
    return
}
{% endif %}

// Generated by {{ atcodertools.version }} {{ atcodertools.url }}  (tips: You use the default template now. You can remove this line by using your custom template)
fun main(args: Array<String>) {
    fun StringArray(size: Int, init: (Int) -> String = { "\u0000" }): Array<String> {
        return Array<String>(size, init)
    }
    class Scanner(stream: InputStream) {
        private val reader = BufferedInputStream(stream).bufferedReader()
        private var st: StringTokenizer? = null
        fun next(): String {
            while (!(st?.hasMoreTokens() ?: false)) st = StringTokenizer(reader.readLine())
            return st!!.nextToken()
        }
    }
    val sc = Scanner(System.`in`)
    {% if prediction_success %}
    {{ input_part }}
    solve({{ actual_arguments }})
    {% else %}
    // Failed to predict input format
    {% endif %}
}
